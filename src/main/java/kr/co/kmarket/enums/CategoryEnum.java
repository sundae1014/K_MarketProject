package kr.co.kmarket.enums;

import java.util.HashMap;
import java.util.Map;

public enum CategoryEnum {

    // 패션의류/잡화
    C0101("여성패션"), C0102("남성패션"), C0103("남녀 공용 의류"), C0104("속옷/잠옷"),
    C0105("신발"), C0106("가방/잡화"), C0107("유아동패션"), C0108("럭셔리패션"),

    // 뷰티
    C0201("럭셔리뷰티"), C0202("스킨케어"), C0203("클렌징/필링"), C0204("선케어/태닝"),
    C0205("메이크업"), C0206("향수"), C0207("남성화장품"), C0208("네일"),
    C0209("어린이화장품"), C0210("헤어"), C0211("바디"), C0212("선물세트/기프트"),

    // 출산/유아동
    C0301("기저귀"), C0302("물티슈"), C0303("분유/어린이식품"), C0304("어린이 건강식품"),
    C0305("수유용품"), C0306("이유용품/유아식기"), C0307("아기띠/외출용품"), C0308("유모차/웨건"),
    C0309("카시트"), C0310("유아가구/인테리어"), C0311("유아동침구"), C0312("유아동도서"),

    // 식품
    C0401("수입식품관"), C0402("식품 선물세트"), C0403("생수/음료"), C0404("커피/원두/차"),
    C0405("과자/초콜릿/시리얼"), C0406("반찬/간편식/이유식"), C0407("면/통조림/가공식품"), C0408("가루/조미료/오일"),
    C0409("장/소스/드레싱/식초"), C0410("냉장/냉동/간편요리"), C0411("과일"), C0412("축산/계란"),

    // 주방용품
    C0501("프리미엄 키친"), C0502("냄비/프라이팬"), C0503("주방조리도구"), C0504("그릇/홈세트"),
    C0505("컵/텀블러/와인용품"), C0506("밀폐저장/도시락"), C0507("수저/커트러리"), C0508("주방잡화"),
    C0509("주방수납/정리"), C0510("일회용품/종이컵"), C0511("주방가전"), C0512("1인가구 주방용품"),

    // 생활용품
    C0601("헤어"), C0602("바디/세안"), C0603("구강/면도"), C0604("화장지/물티슈"),
    C0605("생리대/성인용기저귀"), C0606("기저귀"), C0607("세탁세제"), C0608("청소/주방세제"),
    C0609("탈취/방향/살충"), C0610("건강/의료용품"), C0611("욕실용품"), C0612("생활전기용품"),

    // 홈인테리어
    C0701("설치가구"), C0702("홈데코/디퓨저"), C0703("조명/스탠드"), C0704("커튼/블라인드"),
    C0705("카페트/쿠션"), C0706("가구"), C0707("수납/정리"), C0708("침대/매트리스"),
    C0709("침구"), C0710("공구/철물/DIY"), C0711("셀프인테리어"),

    // 가전디지털
    C0801("TV/영상가전"), C0802("냉장고"), C0803("세탁기/건조기"), C0804("청소기"),
    C0805("계절가전"), C0806("뷰티/헤어가전"), C0807("건강가전"), C0808("주방가전"),
    C0809("노트북"), C0810("데스크탑"), C0811("모니터"), C0812("휴대폰"),

    // 스포츠/레저
    C0901("캠핑전문관"), C0902("홈트레이닝"), C0903("헬스/요가/댄스"), C0904("수영/수상스포츠"),
    C0905("구기스포츠"), C0906("라켓스포츠"), C0907("자전거"), C0908("킥보드/스케이트"),
    C0909("등산/아웃도어"), C0910("낚시"), C0911("골프"),

    // 문구/오피스
    C1001("사무용품"), C1002("미술/화방용품"), C1003("캐릭터문구"), C1004("학용품/수업준비"),
    C1005("필기류"), C1006("노트/메모지"), C1007("다이어리/플래너"), C1008("바인더/파일"),
    C1009("파티/이벤트"), C1010("데코/포장용품"), C1011("카드/엽서/봉투"), C1012("앨범"),

    // 헬스/건강식품
    C1101("건강기능식품"), C1102("비타민/미네랄"), C1103("건강식품"), C1104("허브/식물추출물"),
    C1105("홍삼/인삼"), C1106("꿀/프로폴리스"), C1107("헬스보충식품"), C1108("다이어트/이너뷰티"),
    C1109("영양식/선식"), C1110("어린이 건강식품"),

    // 반려동물
    C1201("강아지용품"), C1202("고양이용품"), C1203("사료"), C1204("간식"),
    C1205("영양제"), C1206("산책용품"), C1207("관상어 용품"), C1208("소동물/가축용품"),

    // 전체상품
    UNKNOWN("전체상품");

    private final String name;

    CategoryEnum(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    // 🔹 코드 → 이름 매핑용 Map
    private static final Map<String, CategoryEnum> map = new HashMap<>();

    static {
        for (CategoryEnum c : CategoryEnum.values()) {
            map.put(c.name(), c);
        }
    }

    public static String getNameByCode(String code) {
        return map.getOrDefault(code, UNKNOWN).getName();
    }
};
