name: Java CI with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables for secrets
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> $GITHUB_ENV
          echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "SOLAPI_KEY=${{ secrets.SOLAPI_KEY }}" >> $GITHUB_ENV
          echo "SOLAPI_SECRET=${{ secrets.SOLAPI_SECRET }}" >> $GITHUB_ENV
          echo "SOLAPI_FROM=${{ secrets.SOLAPI_FROM }}" >> $GITHUB_ENV
          echo "YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build

      - name: Get JAR_FILE
        id: jarfile
        run: |
          JAR_FILE=$(ls build/libs/*.jar | grep -v plain | head -n 1)
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ${{ env.JAR_FILE }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app
          path: build/libs/

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy JAR to EC2
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          scp -i private_key.pem \
            -o StrictHostKeyChecking=no \
            $JAR_FILE \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/
      
      - name: Restart Spring Application on EC2
        run: |
          JAR_FILE=$(basename $(ls build/libs/*.jar | head -n 1))
          ssh -i private_key.pem \
            -o StrictHostKeyChecking=no \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            pgrep java | xargs kill -9;
            nohup java -jar /home/${{ secrets.AWS_EC2_USER }}/$JAR_FILE > app.log 2>&1 &
          EOF

      - name: Cleanup
        run: rm -f private_key.pem
